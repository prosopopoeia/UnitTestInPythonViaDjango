create django project
$ django-admin.py startproject superlists .

https://docs.djangoproject.com/en/1.11/intro/tutorial01/
creates:
mysite/					-[root, container for project]
    manage.py 			-[cmd line utility - to interact with this django project:https://docs.djangoproject.com/en/1.11/ref/django-admin/ ]
    mysite/ 			-[actual python package - name is python package name needed to import e.g. mysite.urls]
        __init__.py		-[tells python this dir is considered a python package: https://docs.python.org/3/tutorial/modules.html#tut-packages ]
        settings.py		-[settings...]
        urls.py			-[ a “table of contents” of your Django-powered site:https://docs.djangoproject.com/en/1.11/topics/http/urls/ ]
        wsgi.py			-[entry-point for WSGI-compatible web servers to serve your project: https://docs.djangoproject.com/en/1.11/howto/deployment/wsgi/ ]

The command to activate the virtualenv is source virtualenv/Scripts/activate 
The command to deactivate is just deactivate.


-----------------------------------
after the project is created, create the app (a way to structure the code):
$ python manage.py startapp lists
creates:
├── lists
│   ├── admin.py
│   ├── apps.py
│   ├── __init__.py
│   ├── migrations
│   │   └── __init__.py
│   ├── models.py
│   ├── tests.py
│   └── views.py

placeholder files for models, views, tests, etc.
-----------------------------------
start server:
$ python manage.py runserver
$ python manage.py runserver 0:8000 [for a diff port]


The development server automatically reloads Python code for each request as needed. 
You don’t need to restart the server for code changes to take effect. However, some actions like 
adding files don’t trigger a restart, so you’ll have to restart the server in these cases.

-----------------------------------
to create virtual environment:
$ py -3.6 -m venv virtualenv

-----------------------------------
create Django foundation:
source/isDjangoThere/add.py

	-creates dir 'lists' containing a number of simple boilerplate files
----------------------------------	



Running the Django dev server

  $  python manage.py runserver
Running the functional tests

   $ python functional_tests.py
Running the unit tests

    $ python manage.py test
	
---------------------------------
geckodriver - need it on system path	
https://github.com/mozilla/geckodriver/releases

"Proxy for using W3C WebDriver compatible clients to interact with Gecko-based browsers.
This program provides the HTTP API described by the WebDriver protocol to communicate with Gecko 
browsers, such as Firefox. It translates calls into the Marionette remote protocol by acting as a 
proxy between the local- and remote ends."

-------------------I believe the above has Selenium:
Selenium is an umbrella project for a range of tools and libraries that enable and support the 
automation of web browsers.

It provides extensions to emulate user interaction with browsers, a distribution server for 
scaling browser allocation, and the infrastructure for implementations of the W3C WebDriver 
specification that lets you write interchangeable code for all major web browsers.

----------------------------------------------------------------------
build Db migration (Db builder -allows to add/remove from table)
$ python manage.py makemigrations 
    - tell django there is a change in a model - store them in a 'migration' -i.e. the schema/model
	- xxxx_initial.py - editable
	
	-mrigrate will run migrations & manage the Db schema auto-ically
vs. $ python manage.py migrate (from docs.djangoproject.com/en/1.11/intro)
The migrate command takes all the migrations that haven’t been applied (Django tracks which ones are applied using a 
special table in your database called django_migrations) and runs them against your database - essentially, 
synchronizing the changes you made to your models with the schema in the database.
---without running migrate, schema isnt made - actual application of Db.

also: $python manage.py sqlmigrate [app name] [0001] <-Is this guy always 0001?

Note: django includes sqlite by default

--------------------------------------------------------
----------quick access to .gitignore-------
$ echo "db.sqlite3" >> .gitignore
$ echo "geckodriver.log" >> .gitignore
$ echo "virtualenv" >> .gitignore